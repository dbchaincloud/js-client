import { AxiosResponse } from "axios"
declare function getBaseUrl(): string;
declare function getIpfsUrl(cid: string): string;
declare function setBaseUrl(url: string): void;
declare function restGet(url: string): Promise<AxiosResponse<any>>;
declare function hasKey(): boolean;
declare function hasPassphrase(): boolean;
declare function savePassphrase(passphrase: any): boolean;
declare function removePassphrase(): void;
declare function newMnemonic(): string;
declare function validateMnemonic(): boolean;
declare function createAndStoreKey(mnemonic: string, passphrase: string): string;
declare function getAddress(): string;
declare function checkChainId(chainId:string): Promise<any>;
declare function getFriends(): Promise<any>;
declare function getPendingFriends(): Promise<any>;
declare function getAppCode(adminOnly:boolean): Promise<any>;
declare function getApp(appCode:String): Promise<any>;
declare function getApps(adminOnly:boolean): Promise<any>;
declare function isSysAdmin(): Promise<any>;
declare function isAppUser(appCode:string): Promise<any>;
declare function getGroups(appCode:string): Promise<any>;
declare function getGroupMemo(appCode:string,groupName:string): Promise<any>;
declare function getGroupMembers(appCode:string,groupName:string): Promise<any>;
declare function getTables(appCode:string): Promise<any>;
declare function getTableOptions(appCode:string,tableName:string): Promise<any>;
declare function getTableRaw(appCode:string,tableName:string,name:string): Promise<any>;
declare function getFieldOptions(appCode:string,tableName:string,fieldName:string): Promise<any>;
declare function getFieldType(appCode:string,tableName:string,fieldName:string): Promise<any>;
declare function getInsertFilter(appCode:string,tableName:string): Promise<any>;
declare function getTrigger(appCode:string,tableName:string): Promise<any>;
declare function getTableMemo(appCode:string,tableName:string): Promise<any>;
declare function getAllIds(appCode:string,tableName:string): Promise<any>;
declare function getIdsBy(appCode:string,tableName:string,fieldName:string,value:string): Promise<any>;
declare function getRow(appCode:string,id:string): Promise<any>;
declare function canInsertRow(appCode:string,tableName:string,record:Object): Promise<any>;
declare function querier(appCode:string,querierObj:Object): Promise<any>;
declare function getAccount(address:string): Promise<any>;
declare function sendToken(toAddress:string,amount:string,callback:Function): Promise<any>;
declare function addFriend(myName:string,friendAddr:string,friendName:string,callback:Function): Promise<any>;
declare function dropFriend(friendAddr:string,callback:Function): Promise<any>;
declare function respondFriend(friendAddr:string,action:string,callback:Function): Promise<any>;
declare function insertRow(appCode:string,tableName:string,fields:String,callback:Function): Promise<any>;
declare function uploadFile(file:File,appCode:string): Promise<any>;
declare function commit (callback:Function): Promise<any>;
declare function callFunction (appCode:string,FunctionName:String,Argument:[],callback:Function): Promise<any>;
declare function callCustomQuerier (appCode:String,FunctionName:String,Argument:[],callback:Function): Promise<any>;
declare function sendVerificationCode (mobile:string): Promise<any>;
declare function verifyVerificationCode (mobile:string,code:string): Promise<any>;
declare function verifyIdCard (name:string,idNumber:string): Promise<any>;
declare function verifyCorpInfo (corpName:string,regNumber:string,creditCode:string): Promise<any>;
declare function uriBuilder (args:any[]): Promise<any>;
declare function setMyName (newName:string): void;
declare function getMyName (): void;
declare function getFriendNameKey (address:string): string;
declare function saveFriends (friends:any): void;
declare function saveFriendName (address:string,name:string): void;
declare function getLocalFriends (): any[];
declare function getLocalFriendName (address:string):any;
declare function removeFriendName (address:string):void;
declare function addLocalFriend (address:string,name:string):void;
declare function removeLocalFriend (address:string):void;
declare function getChainId():string;
declare function setChainId(id:string):void;
declare function Querier(appCode:string):Object;
declare function validateCID(cid:string):boolean;
declare function detectChain(url?:string,chainId?:string):boolean;
declare function createAccessToken():string;
declare function registryMessageType(url:string,value:any):void;




